<?php

namespace Dime\TimetrackerBundle\Entity;

use Dime\TimetrackerBundle\Entity\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * TimesliceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimesliceRepository extends EntityRepository
{
    /**
     * Scope by search text.
     * Search not possible.
     *
     * @param string            $text
     * @param QueryBuilder      $qb
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function search($text, QueryBuilder $qb)
    {
        return $qb;
    }

    /**
     * Scope by date,
     * Not implemented yet.
     *
     * @param                   $date
     * @param QueryBuilder      $qb
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function scopeByDate($date, QueryBuilder $qb)
    {
        return $qb;
    }

    /**
     * Scope by user.
     *
     * @param                            $user
     * @param \Doctrine\ORM\QueryBuilder $qb
     *
     * @return \Doctrine\ORM\QueryBuilder
     * @throws
     */
    public function scopeByUser($user, QueryBuilder $qb)
    {
        if ($qb == null) {
            throw \Exception("QueryBuilder must be set");
        }

        $aliases = $qb->getRootAliases();
        $alias = array_shift($aliases);

        $qb->leftJoin($alias . '.activity', 'a');

        $qb->andWhere($qb->expr()->eq("a.user", ":user"));
        $qb->setParameter(":user", $user);

        return $qb;
    }

    /**
     * Fetch all activities id where a timeslice has stoppedAt is NULL and duration is '0'.
     * This query is a native one, because Doctrine DQL can not fetch only the activity_id.
     *
     * @param $date, Date
     * @return array, list of activity ids
     */
    public function fetchActivityIdsByDate($date)
    {
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('activity_id', 'activity');

        $sql = 'SELECT DISTINCT t.activity_id FROM timeslices t WHERE t.started_at LIKE :date';

        $query = $this
            ->getEntityManager()
            ->createNativeQuery($sql, $rsm)
            ->setParameter('date', $date . '%');

        return array_map("array_pop", $query->getResult());
    }

    /**
     * Fetch all activities id where a timeslice has stoppedAt is NULL and duration is '0'.
     * This query is a native one, because Doctrine DQL can not fetch only the activity_id.
     *
     * @param $from
     * @param $to
     * @return array, list of activity ids
     */
    public function fetchActivityIdsByDateRange($from, $to)
    {
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('activity_id', 'activity');

        $sql = 'SELECT DISTINCT t.activity_id FROM timeslices t WHERE t.started_at BETWEEN ? AND ?';

        $query = $this
            ->getEntityManager()
            ->createNativeQuery($sql, $rsm)
            ->setParameter(1, $from)
            ->setParameter(2, $to);

        return array_map("array_pop", $query->getResult());
    }

    /**
     * Fetch all activities id where a timeslice has stoppedAt is NULL and duration is '0'.
     * This query is a native one, because Doctrine DQL can not fetch only the activity_id.
     *
     * @return array, list of activity ids
     */
    public function fetchRunningActivityIds()
    {
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('activity_id', 'activity');

        $sql = 'SELECT DISTINCT t.activity_id FROM timeslices t WHERE t.stopped_at IS NULL AND t.duration = 0';

        $query = $this
            ->getEntityManager()
            ->createNativeQuery($sql, $rsm);

        return array_map("array_pop", $query->getResult());
    }
}
