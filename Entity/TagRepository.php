<?php

namespace Dime\TimetrackerBundle\Entity;

use Dime\TimetrackerBundle\Entity\Tag;
use Doctrine\ORM\EntityRepository as Base;
use Doctrine\ORM\QueryBuilder;
/**
 * TagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagRepository extends Base
{
    /**
     * get ids for tags and create non-existing ones
     * 
     * @param array        $tags Array of strings
     * @param QueryBuilder $qb   Query builder instance
     * @return array (name => id)
     */
    public function getIdsForTags($tags, QueryBuilder $qb)
    {
        $qb->add('select', 't.name, t.id')
            ->add('where', $qb->expr()->in('t.name', ':tags'))
            ->setParameter('tags', $tags);
        $existingTags = $qb->getQuery()->getResult();
        $ids = array();
        foreach ($existingTags as $tag) {
            $ids[$tag['name']] = $tag['id'];
        }
        $missingTags = array_diff($tags, array_keys($ids));
        if (0 < count($missingTags)) {
            foreach ($missingTags as $tagName) {
                $newTag = new Tag();
                $newTag->setName($tagName);
                $this->getEntityManager()->persist($newTag);
            }
            $this->getEntityManager()->flush();
            $ids = array_merge($ids, $this->getIdsForTags(array_values($missingTags), $qb));
        }
        return array_values($ids);
    }
}
